/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MPHMinterInterface extends ethers.utils.Interface {
  functions: {
    "devRewardMultiplier()": FunctionFragment;
    "devWallet()": FunctionFragment;
    "govTreasury()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "mintDepositorReward(address,uint256)": FunctionFragment;
    "mintFunderReward(address,uint256)": FunctionFragment;
    "mph()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolDepositorRewardMultiplier(address)": FunctionFragment;
    "poolFunderRewardMultiplier(address)": FunctionFragment;
    "poolMintingMultiplier(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDevWallet(address)": FunctionFragment;
    "setGovTreasury(address)": FunctionFragment;
    "setPoolDepositorRewardMultiplier(address,uint256)": FunctionFragment;
    "setPoolFunderRewardMultiplier(address,uint256)": FunctionFragment;
    "setPoolMintingMultiplier(address,uint256)": FunctionFragment;
    "takeBackDepositorReward(address,uint256,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "devRewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintDepositorReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFunderReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mph", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolDepositorRewardMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFunderRewardMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolMintingMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolDepositorRewardMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFunderRewardMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolMintingMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBackDepositorReward",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "devRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintDepositorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFunderReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mph", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolDepositorRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFunderRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolMintingMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolDepositorRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFunderRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolMintingMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBackDepositorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ESetParamAddress(address,string,address)": EventFragment;
    "ESetParamUint(address,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ESetParamAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ESetParamUint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MPHMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MPHMinterInterface;

  functions: {
    devRewardMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "devRewardMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    devWallet(overrides?: CallOverrides): Promise<[string]>;

    "devWallet()"(overrides?: CallOverrides): Promise<[string]>;

    govTreasury(overrides?: CallOverrides): Promise<[string]>;

    "govTreasury()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    mintDepositorReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintDepositorReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintFunderReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintFunderReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mph(overrides?: CallOverrides): Promise<[string]>;

    "mph()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    poolDepositorRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolDepositorRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolMintingMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolMintingMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevWallet(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDevWallet(address)"(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovTreasury(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovTreasury(address)"(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolDepositorRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPoolDepositorRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolMintingMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPoolMintingMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeBackDepositorReward(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "takeBackDepositorReward(address,uint256,bool)"(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  devRewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "devRewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  devWallet(overrides?: CallOverrides): Promise<string>;

  "devWallet()"(overrides?: CallOverrides): Promise<string>;

  govTreasury(overrides?: CallOverrides): Promise<string>;

  "govTreasury()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  mintDepositorReward(
    to: string,
    interestAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintDepositorReward(address,uint256)"(
    to: string,
    interestAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintFunderReward(
    to: string,
    interestAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintFunderReward(address,uint256)"(
    to: string,
    interestAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mph(overrides?: CallOverrides): Promise<string>;

  "mph()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolDepositorRewardMultiplier(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolDepositorRewardMultiplier(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolFunderRewardMultiplier(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolFunderRewardMultiplier(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolMintingMultiplier(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolMintingMultiplier(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevWallet(
    newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDevWallet(address)"(
    newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovTreasury(
    newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovTreasury(address)"(
    newValue: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolDepositorRewardMultiplier(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPoolDepositorRewardMultiplier(address,uint256)"(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolFunderRewardMultiplier(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPoolFunderRewardMultiplier(address,uint256)"(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolMintingMultiplier(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPoolMintingMultiplier(address,uint256)"(
    pool: string,
    newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeBackDepositorReward(
    from: string,
    mintMPHAmount: BigNumberish,
    early: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "takeBackDepositorReward(address,uint256,bool)"(
    from: string,
    mintMPHAmount: BigNumberish,
    early: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    devRewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "devRewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    devWallet(overrides?: CallOverrides): Promise<string>;

    "devWallet()"(overrides?: CallOverrides): Promise<string>;

    govTreasury(overrides?: CallOverrides): Promise<string>;

    "govTreasury()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    mintDepositorReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintDepositorReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFunderReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintFunderReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mph(overrides?: CallOverrides): Promise<string>;

    "mph()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolDepositorRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolMintingMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolMintingMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDevWallet(newValue: string, overrides?: CallOverrides): Promise<void>;

    "setDevWallet(address)"(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovTreasury(newValue: string, overrides?: CallOverrides): Promise<void>;

    "setGovTreasury(address)"(
      newValue: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolDepositorRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolDepositorRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolMintingMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolMintingMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeBackDepositorReward(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "takeBackDepositorReward(address,uint256,bool)"(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ESetParamAddress(
      sender: string | null,
      paramName: string | null,
      newValue: null
    ): TypedEventFilter<
      [string, string, string],
      { sender: string; paramName: string; newValue: string }
    >;

    ESetParamUint(
      sender: string | null,
      paramName: string | null,
      newValue: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; paramName: string; newValue: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    devRewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "devRewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    devWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "devWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    govTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    "govTreasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintDepositorReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintDepositorReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintFunderReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintFunderReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mph(overrides?: CallOverrides): Promise<BigNumber>;

    "mph()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolDepositorRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolDepositorRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolMintingMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolMintingMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevWallet(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDevWallet(address)"(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovTreasury(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovTreasury(address)"(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolDepositorRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPoolDepositorRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolMintingMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPoolMintingMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeBackDepositorReward(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "takeBackDepositorReward(address,uint256,bool)"(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    devRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "devRewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devWallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "govTreasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintDepositorReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintDepositorReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintFunderReward(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintFunderReward(address,uint256)"(
      to: string,
      interestAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mph(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mph()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDepositorRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolDepositorRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFunderRewardMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolFunderRewardMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolMintingMultiplier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolMintingMultiplier(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevWallet(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDevWallet(address)"(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovTreasury(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovTreasury(address)"(
      newValue: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolDepositorRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPoolDepositorRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFunderRewardMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPoolFunderRewardMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolMintingMultiplier(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPoolMintingMultiplier(address,uint256)"(
      pool: string,
      newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeBackDepositorReward(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "takeBackDepositorReward(address,uint256,bool)"(
      from: string,
      mintMPHAmount: BigNumberish,
      early: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
